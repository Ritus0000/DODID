/* Время */
function updateTime(){
  const el=document.getElementById('time');
  if(!el) return;
  const d=new Date();
  const hh=String(d.getHours()).padStart(2,'0');
  const mm=String(d.getMinutes()).padStart(2,'0');
  el.textContent = `${hh}:${mm}`;
}
setInterval(updateTime, 10000);
updateTime();

/* День недели */
const dowNames = ['Воскресенье','Понедельник','Вторник','Среда','Четверг','Пятница','Суббота'];
(function(){
  const el=document.getElementById('dow');
  if(el){
    el.textContent = dowNames[new Date().getDay()] || 'Сегодня';
  }
})();

/* ДАННЫЕ */
const tasksEl = document.getElementById('tasks');

function taskLi(text=''){
  const li=document.createElement('li');

  const circle=document.createElement('button');
  circle.className='circle'; circle.type='button';
  circle.innerHTML = `
    <svg class="tick" viewBox="0 0 24 24" aria-hidden="true">
      <path d="M6 12.5l4.2 4.2L18 9" />
    </svg>
  `;
  li.appendChild(circle);

  const wrap=document.createElement('div');
  wrap.className='textwrap';
  const input=document.createElement('div');
  input.className='task-text'; input.contentEditable='true'; input.spellcheck=false;
  input.textContent=text;
  const ph=document.createElement('div');
  ph.className='placeholder'; ph.textContent='Новая задача…';
  wrap.appendChild(input); wrap.appendChild(ph);
  li.appendChild(wrap);

  if(text) input.classList.add('hasText');

  circle.addEventListener('touchstart',()=>circle.classList.add('touch'),{passive:true});
  circle.addEventListener('touchend',()=>circle.classList.remove('touch'),{passive:true});
  circle.addEventListener('click', ()=>{
    li.classList.toggle('done');
    buildStrike(wrap,true);
  });

  input.addEventListener('input', ()=>{
    syncEmptyClass(input);
    buildStrike(wrap,false);
  });

  input.addEventListener('focus', ()=>{ /* для iOS */ });

  return li;
}

function syncEmptyClass(el){
  if(el.textContent && el.textContent.trim().length>0) el.classList.add('hasText');
  else el.classList.remove('hasText');
}

/* Первичные элементы */
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Eg'));
tasksEl.appendChild(taskLi('Новая задача…'));

/* Кнопка добавить */
document.getElementById('addBtn')?.addEventListener('click', ()=>{
  const li=taskLi('');
  tasksEl.appendChild(li);
  const input=li.querySelector('.task-text');
  input?.focus();
});

/* ==== iOS Safari strike alignment fix (first pass) ==== */
(function(){
  function isIOS(){
    const ua = navigator.userAgent || '';
    const platform = navigator.platform || '';
    const macTouch = ua.includes('Mac') && 'ontouchend' in document;
    return /iP(hone|od|ad)/.test(platform) || macTouch;
  }

  if (typeof window.buildStrike === 'function' || true){
    window.buildStrike = function(textWrap, animate=true){
      const old = textWrap.querySelector('.strike-svg'); if(old) old.remove();
      const textEl = textWrap.querySelector('.task-text'); if(!textEl) return;

      if (typeof window.syncEmptyClass === 'function') window.syncEmptyClass(textEl);

      const range = document.createRange(); range.selectNodeContents(textEl);
      const rects = Array.from(range.getClientRects());

      const svgNS='http://www.w3.org/2000/svg';
      const svg=document.createElementNS(svgNS,'svg'); svg.classList.add('strike-svg');

      const parentRect=textWrap.getBoundingClientRect();
      svg.setAttribute('width', parentRect.width);
      svg.setAttribute('height', parentRect.height);
      svg.setAttribute('viewBox', `0 0 ${parentRect.width} ${parentRect.height}`);

      let metrics = null;
      try{
        if(!isIOS() && typeof window.getFontMetrics === 'function'){
          metrics = window.getFontMetrics(textEl);
        }
      }catch(_){ metrics = null; }

      rects.forEach(r=>{
        const x1 = r.left - parentRect.left;
        const x2 = r.right - parentRect.left;
        const len = Math.max(0, x2 - x1);
        if(len <= 0) return;

        let yLocal;
        if(metrics){
          const baseline = (r.bottom - parentRect.top) - metrics.descent;
          const cap = metrics.ascent;
          yLocal = baseline - cap*0.50; // center optically
        }else{
          yLocal = (r.top - parentRect.top) + r.height*0.52; // robust for Safari
        }

        const line=document.createElementNS(svgNS,'line');
        line.setAttribute('x1', x1); line.setAttribute('y1', yLocal);
        line.setAttribute('x2', x2); line.setAttribute('y2', yLocal);
        line.classList.add('strike-line');
        line.style.setProperty('--len', `${len}`);
        if(!animate){ line.style.strokeDashoffset=0; line.style.transition='none'; }
        svg.appendChild(line);
        if(animate){ requestAnimationFrame(()=>{ line.style.strokeDashoffset=0; }); }
      });

      textWrap.appendChild(svg);
    };
  }
})();

/* ==== VisualViewport-driven sizing & keyboard offset ==== */
(function(){
  const vv = window.visualViewport;
  if(!vv){
    document.documentElement.style.setProperty('--appH', window.innerHeight + 'px');
    return;
  }

  let base = Math.max(window.innerHeight, vv.height); // baseline without keyboard

  function setVars(){
    const appH = Math.round(vv.height);
    document.documentElement.style.setProperty('--appH', appH + 'px');
    const kb = Math.max(0, base - vv.height);  // keyboard overlay height approximation
    document.documentElement.style.setProperty('--kb-offset', kb + 'px');
  }

  vv.addEventListener('resize', setVars);
  vv.addEventListener('scroll', setVars);
  window.addEventListener('orientationchange', () => {
    setTimeout(()=>{
      base = Math.max(window.innerHeight, (window.visualViewport && window.visualViewport.height) || window.innerHeight);
      setVars();
    }, 300);
  });

  setVars();
})();

/* ==== Precise (Cyrillic-aware) strikethrough centering ==== */
(function(){
  function px(n){ return parseFloat(n)||0; }
  function parsedLineHeight(cs, fontSize){
    const lh = cs.lineHeight;
    if(lh === 'normal' || !lh) return 1.2 * fontSize; // typical UA default
    if(lh.endsWith('px')) return px(lh);
    const mul = parseFloat(lh);
    if(!isNaN(mul)) return mul * fontSize;
    return 1.2 * fontSize;
  }

  function getAscentDescent(el){
    const cs = getComputedStyle(el);
    const fontSize = px(cs.fontSize);
    const font = `${cs.fontStyle} ${cs.fontVariant} ${cs.fontWeight} ${fontSize}px ${cs.fontFamily}`.trim();
    const c = document.createElement('canvas');
    const ctx = c.getContext('2d');
    ctx.font = font;
    ctx.textBaseline = 'alphabetic';
    const sample = el.textContent && el.textContent.trim() ? el.textContent : 'АаБбВвГгDdJjQqЁЙЙ';
    const m = ctx.measureText(sample);
    const ascent  = m.actualBoundingBoxAscent || fontSize * 0.8;
    const descent = m.actualBoundingBoxDescent || fontSize * 0.2;
    return {ascent, descent, fontSize, lineHeight: parsedLineHeight(cs, fontSize)};
  }

  window.buildStrike = function(textWrap, animate=true){
    const old = textWrap.querySelector('.strike-svg'); if(old) old.remove();
    const textEl = textWrap.querySelector('.task-text'); if(!textEl) return;

    if (typeof window.syncEmptyClass === 'function') window.syncEmptyClass(textEl);

    const range = document.createRange(); range.selectNodeContents(textEl);
    const rects = Array.from(range.getClientRects());

    const {ascent, descent, fontSize, lineHeight} = getAscentDescent(textEl);

    const svgNS='http://www.w3.org/2000/svg';
    const svg=document.createElementNS(svgNS,'svg'); svg.classList.add('strike-svg');

    const parentRect=textWrap.getBoundingClientRect();
    svg.setAttribute('width', parentRect.width);
    svg.setAttribute('height', parentRect.height);
    svg.setAttribute('viewBox', `0 0 ${parentRect.width} ${parentRect.height}`);

    // Offset from top of line box to the center of the glyph box
    const topToCenter = (lineHeight - fontSize)/2 + (ascent + descent)/2;

    rects.forEach(r=>{
      const x1 = r.left - parentRect.left;
      const x2 = r.right - parentRect.left;
      const len = Math.max(0, x2 - x1);
      if(len <= 0) return;

      const yLocal = (r.top - parentRect.top) + topToCenter;

      const line=document.createElementNS(svgNS,'line');
      line.setAttribute('x1', x1); line.setAttribute('y1', yLocal);
      line.setAttribute('x2', x2); line.setAttribute('y2', yLocal);
      line.classList.add('strike-line');
      line.style.setProperty('--len', `${len}`);
      if(!animate){ line.style.strokeDashoffset=0; line.style.transition='none'; }
      svg.appendChild(line);
      if(animate){ requestAnimationFrame(()=>{ line.style.strokeDashoffset=0; }); }
    });

    textWrap.appendChild(svg);
  };
})();
/* Время */
function updateTime(){
  const el=document.getElementById('time');
  if(!el) return;
  const d=new Date();
  const hh=String(d.getHours()).padStart(2,'0');
  const mm=String(d.getMinutes()).padStart(2,'0');
  el.textContent = `${hh}:${mm}`;
}
setInterval(updateTime, 10000);
updateTime();

/* День недели */
const dowNames = ['Воскресенье','Понедельник','Вторник','Среда','Четверг','Пятница','Суббота'];
(function(){
  const el=document.getElementById('dow');
  if(el){
    el.textContent = dowNames[new Date().getDay()] || 'Сегодня';
  }
})();

/* ДАННЫЕ */
const tasksEl = document.getElementById('tasks');

function taskLi(text=''){
  const li=document.createElement('li');

  const circle=document.createElement('button');
  circle.className='circle'; circle.type='button';
  circle.innerHTML = `
    <svg class="tick" viewBox="0 0 24 24" aria-hidden="true">
      <path d="M6 12.5l4.2 4.2L18 9" />
    </svg>
  `;
  li.appendChild(circle);

  const wrap=document.createElement('div');
  wrap.className='textwrap';
  const input=document.createElement('div');
  input.className='task-text'; input.contentEditable='true'; input.spellcheck=false;
  input.textContent=text;
  const ph=document.createElement('div');
  ph.className='placeholder'; ph.textContent='Новая задача…';
  wrap.appendChild(input); wrap.appendChild(ph);
  li.appendChild(wrap);

  if(text) input.classList.add('hasText');

  circle.addEventListener('touchstart',()=>circle.classList.add('touch'),{passive:true});
  circle.addEventListener('touchend',()=>circle.classList.remove('touch'),{passive:true});
  circle.addEventListener('click', ()=>{
    li.classList.toggle('done');
    buildStrike(wrap,true);
  });

  input.addEventListener('input', ()=>{
    syncEmptyClass(input);
    buildStrike(wrap,false);
  });

  input.addEventListener('focus', ()=>{ /* для iOS */ });

  return li;
}

function syncEmptyClass(el){
  if(el.textContent && el.textContent.trim().length>0) el.classList.add('hasText');
  else el.classList.remove('hasText');
}

/* Первичные элементы */
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Eg'));
tasksEl.appendChild(taskLi('Новая задача…'));

/* Кнопка добавить */
document.getElementById('addBtn')?.addEventListener('click', ()=>{
  const li=taskLi('');
  tasksEl.appendChild(li);
  const input=li.querySelector('.task-text');
  input?.focus();
});

/* ==== iOS Safari strike alignment fix (first pass) ==== */
(function(){
  function isIOS(){
    const ua = navigator.userAgent || '';
    const platform = navigator.platform || '';
    const macTouch = ua.includes('Mac') && 'ontouchend' in document;
    return /iP(hone|od|ad)/.test(platform) || macTouch;
  }

  if (typeof window.buildStrike === 'function' || true){
    window.buildStrike = function(textWrap, animate=true){
      const old = textWrap.querySelector('.strike-svg'); if(old) old.remove();
      const textEl = textWrap.querySelector('.task-text'); if(!textEl) return;

      if (typeof window.syncEmptyClass === 'function') window.syncEmptyClass(textEl);

      const range = document.createRange(); range.selectNodeContents(textEl);
      const rects = Array.from(range.getClientRects());

      const svgNS='http://www.w3.org/2000/svg';
      const svg=document.createElementNS(svgNS,'svg'); svg.classList.add('strike-svg');

      const parentRect=textWrap.getBoundingClientRect();
      svg.setAttribute('width', parentRect.width);
      svg.setAttribute('height', parentRect.height);
      svg.setAttribute('viewBox', `0 0 ${parentRect.width} ${parentRect.height}`);

      let metrics = null;
      try{
        if(!isIOS() && typeof window.getFontMetrics === 'function'){
          metrics = window.getFontMetrics(textEl);
        }
      }catch(_){ metrics = null; }

      rects.forEach(r=>{
        const x1 = r.left - parentRect.left;
        const x2 = r.right - parentRect.left;
        const len = Math.max(0, x2 - x1);
        if(len <= 0) return;

        let yLocal;
        if(metrics){
          const baseline = (r.bottom - parentRect.top) - metrics.descent;
          const cap = metrics.ascent;
          yLocal = baseline - cap*0.50; // center optically
        }else{
          yLocal = (r.top - parentRect.top) + r.height*0.52; // robust for Safari
        }

        const line=document.createElementNS(svgNS,'line');
        line.setAttribute('x1', x1); line.setAttribute('y1', yLocal);
        line.setAttribute('x2', x2); line.setAttribute('y2', yLocal);
        line.classList.add('strike-line');
        line.style.setProperty('--len', `${len}`);
        if(!animate){ line.style.strokeDashoffset=0; line.style.transition='none'; }
        svg.appendChild(line);
        if(animate){ requestAnimationFrame(()=>{ line.style.strokeDashoffset=0; }); }
      });

      textWrap.appendChild(svg);
    };
  }
})();

/* ==== VisualViewport-driven sizing & keyboard offset ==== */
(function(){
  const vv = window.visualViewport;
  if(!vv){
    document.documentElement.style.setProperty('--appH', window.innerHeight + 'px');
    return;
  }

  let base = Math.max(window.innerHeight, vv.height); // baseline without keyboard

  function setVars(){
    const appH = Math.round(vv.height);
    document.documentElement.style.setProperty('--appH', appH + 'px');
    const kb = Math.max(0, base - vv.height);  // keyboard overlay height approximation
    document.documentElement.style.setProperty('--kb-offset', kb + 'px');
  }

  vv.addEventListener('resize', setVars);
  vv.addEventListener('scroll', setVars);
  window.addEventListener('orientationchange', () => {
    setTimeout(()=>{
      base = Math.max(window.innerHeight, (window.visualViewport && window.visualViewport.height) || window.innerHeight);
      setVars();
    }, 300);
  });

  setVars();
})();

/* ==== Precise (Cyrillic-aware) strikethrough centering ==== */
(function(){
  function px(n){ return parseFloat(n)||0; }
  function parsedLineHeight(cs, fontSize){
    const lh = cs.lineHeight;
    if(lh === 'normal' || !lh) return 1.2 * fontSize; // typical UA default
    if(lh.endsWith('px')) return px(lh);
    const mul = parseFloat(lh);
    if(!isNaN(mul)) return mul * fontSize;
    return 1.2 * fontSize;
  }

  function getAscentDescent(el){
    const cs = getComputedStyle(el);
    const fontSize = px(cs.fontSize);
    const font = `${cs.fontStyle} ${cs.fontVariant} ${cs.fontWeight} ${fontSize}px ${cs.fontFamily}`.trim();
    const c = document.createElement('canvas');
    const ctx = c.getContext('2d');
    ctx.font = font;
    ctx.textBaseline = 'alphabetic';
    const sample = el.textContent && el.textContent.trim() ? el.textContent : 'АаБбВвГгDdJjQqЁЙЙ';
    const m = ctx.measureText(sample);
    const ascent  = m.actualBoundingBoxAscent || fontSize * 0.8;
    const descent = m.actualBoundingBoxDescent || fontSize * 0.2;
    return {ascent, descent, fontSize, lineHeight: parsedLineHeight(cs, fontSize)};
  }

  window.buildStrike = function(textWrap, animate=true){
    const old = textWrap.querySelector('.strike-svg'); if(old) old.remove();
    const textEl = textWrap.querySelector('.task-text'); if(!textEl) return;

    if (typeof window.syncEmptyClass === 'function') window.syncEmptyClass(textEl);

    const range = document.createRange(); range.selectNodeContents(textEl);
    const rects = Array.from(range.getClientRects());

    const {ascent, descent, fontSize, lineHeight} = getAscentDescent(textEl);

    const svgNS='http://www.w3.org/2000/svg';
    const svg=document.createElementNS(svgNS,'svg'); svg.classList.add('strike-svg');

    const parentRect=textWrap.getBoundingClientRect();
    svg.setAttribute('width', parentRect.width);
    svg.setAttribute('height', parentRect.height);
    svg.setAttribute('viewBox', `0 0 ${parentRect.width} ${parentRect.height}`);

    // Offset from top of line box to the center of the glyph box
    const topToCenter = (lineHeight - fontSize)/2 + (ascent + descent)/2;

    rects.forEach(r=>{
      const x1 = r.left - parentRect.left;
      const x2 = r.right - parentRect.left;
      const len = Math.max(0, x2 - x1);
      if(len <= 0) return;

      const yLocal = (r.top - parentRect.top) + topToCenter;

      const line=document.createElementNS(svgNS,'line');
      line.setAttribute('x1', x1); line.setAttribute('y1', yLocal);
      line.setAttribute('x2', x2); line.setAttribute('y2', yLocal);
      line.classList.add('strike-line');
      line.style.setProperty('--len', `${len}`);
      if(!animate){ line.style.strokeDashoffset=0; line.style.transition='none'; }
      svg.appendChild(line);
      if(animate){ requestAnimationFrame(()=>{ line.style.strokeDashoffset=0; }); }
    });

    textWrap.appendChild(svg);
  };
})();
/* Время */
function updateTime(){
  const el=document.getElementById('time');
  if(!el) return;
  const d=new Date();
  const hh=String(d.getHours()).padStart(2,'0');
  const mm=String(d.getMinutes()).padStart(2,'0');
  el.textContent = `${hh}:${mm}`;
}
setInterval(updateTime, 10000);
updateTime();

/* День недели */
const dowNames = ['Воскресенье','Понедельник','Вторник','Среда','Четверг','Пятница','Суббота'];
(function(){
  const el=document.getElementById('dow');
  if(el){
    el.textContent = dowNames[new Date().getDay()] || 'Сегодня';
  }
})();

/* ДАННЫЕ */
const tasksEl = document.getElementById('tasks');

function taskLi(text=''){
  const li=document.createElement('li');

  const circle=document.createElement('button');
  circle.className='circle'; circle.type='button';
  circle.innerHTML = `
    <svg class="tick" viewBox="0 0 24 24" aria-hidden="true">
      <path d="M6 12.5l4.2 4.2L18 9" />
    </svg>
  `;
  li.appendChild(circle);

  const wrap=document.createElement('div');
  wrap.className='textwrap';
  const input=document.createElement('div');
  input.className='task-text'; input.contentEditable='true'; input.spellcheck=false;
  input.textContent=text;
  const ph=document.createElement('div');
  ph.className='placeholder'; ph.textContent='Новая задача…';
  wrap.appendChild(input); wrap.appendChild(ph);
  li.appendChild(wrap);

  if(text) input.classList.add('hasText');

  circle.addEventListener('touchstart',()=>circle.classList.add('touch'),{passive:true});
  circle.addEventListener('touchend',()=>circle.classList.remove('touch'),{passive:true});
  circle.addEventListener('click', ()=>{
    li.classList.toggle('done');
    buildStrike(wrap,true);
  });

  input.addEventListener('input', ()=>{
    syncEmptyClass(input);
    buildStrike(wrap,false);
  });

  input.addEventListener('focus', ()=>{ /* для iOS */ });

  return li;
}

function syncEmptyClass(el){
  if(el.textContent && el.textContent.trim().length>0) el.classList.add('hasText');
  else el.classList.remove('hasText');
}

/* Первичные элементы */
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Eg'));
tasksEl.appendChild(taskLi('Новая задача…'));

/* Кнопка добавить */
document.getElementById('addBtn')?.addEventListener('click', ()=>{
  const li=taskLi('');
  tasksEl.appendChild(li);
  const input=li.querySelector('.task-text');
  input?.focus();
});

/* ==== iOS Safari strike alignment fix (first pass) ==== */
(function(){
  function isIOS(){
    const ua = navigator.userAgent || '';
    const platform = navigator.platform || '';
    const macTouch = ua.includes('Mac') && 'ontouchend' in document;
    return /iP(hone|od|ad)/.test(platform) || macTouch;
  }

  if (typeof window.buildStrike === 'function' || true){
    window.buildStrike = function(textWrap, animate=true){
      const old = textWrap.querySelector('.strike-svg'); if(old) old.remove();
      const textEl = textWrap.querySelector('.task-text'); if(!textEl) return;

      if (typeof window.syncEmptyClass === 'function') window.syncEmptyClass(textEl);

      const range = document.createRange(); range.selectNodeContents(textEl);
      const rects = Array.from(range.getClientRects());

      const svgNS='http://www.w3.org/2000/svg';
      const svg=document.createElementNS(svgNS,'svg'); svg.classList.add('strike-svg');

      const parentRect=textWrap.getBoundingClientRect();
      svg.setAttribute('width', parentRect.width);
      svg.setAttribute('height', parentRect.height);
      svg.setAttribute('viewBox', `0 0 ${parentRect.width} ${parentRect.height}`);

      let metrics = null;
      try{
        if(!isIOS() && typeof window.getFontMetrics === 'function'){
          metrics = window.getFontMetrics(textEl);
        }
      }catch(_){ metrics = null; }

      rects.forEach(r=>{
        const x1 = r.left - parentRect.left;
        const x2 = r.right - parentRect.left;
        const len = Math.max(0, x2 - x1);
        if(len <= 0) return;

        let yLocal;
        if(metrics){
          const baseline = (r.bottom - parentRect.top) - metrics.descent;
          const cap = metrics.ascent;
          yLocal = baseline - cap*0.50; // center optically
        }else{
          yLocal = (r.top - parentRect.top) + r.height*0.52; // robust for Safari
        }

        const line=document.createElementNS(svgNS,'line');
        line.setAttribute('x1', x1); line.setAttribute('y1', yLocal);
        line.setAttribute('x2', x2); line.setAttribute('y2', yLocal);
        line.classList.add('strike-line');
        line.style.setProperty('--len', `${len}`);
        if(!animate){ line.style.strokeDashoffset=0; line.style.transition='none'; }
        svg.appendChild(line);
        if(animate){ requestAnimationFrame(()=>{ line.style.strokeDashoffset=0; }); }
      });

      textWrap.appendChild(svg);
    };
  }
})();

/* ==== VisualViewport-driven sizing & keyboard offset ==== */
(function(){
  const vv = window.visualViewport;
  if(!vv){
    document.documentElement.style.setProperty('--appH', window.innerHeight + 'px');
    return;
  }

  let base = Math.max(window.innerHeight, vv.height); // baseline without keyboard

  function setVars(){
    const appH = Math.round(vv.height);
    document.documentElement.style.setProperty('--appH', appH + 'px');
    const kb = Math.max(0, base - vv.height);  // keyboard overlay height approximation
    document.documentElement.style.setProperty('--kb-offset', kb + 'px');
  }

  vv.addEventListener('resize', setVars);
  vv.addEventListener('scroll', setVars);
  window.addEventListener('orientationchange', () => {
    setTimeout(()=>{
      base = Math.max(window.innerHeight, (window.visualViewport && window.visualViewport.height) || window.innerHeight);
      setVars();
    }, 300);
  });

  setVars();
})();

/* ==== Precise (Cyrillic-aware) strikethrough centering ==== */
(function(){
  function px(n){ return parseFloat(n)||0; }
  function parsedLineHeight(cs, fontSize){
    const lh = cs.lineHeight;
    if(lh === 'normal' || !lh) return 1.2 * fontSize; // typical UA default
    if(lh.endsWith('px')) return px(lh);
    const mul = parseFloat(lh);
    if(!isNaN(mul)) return mul * fontSize;
    return 1.2 * fontSize;
  }

  function getAscentDescent(el){
    const cs = getComputedStyle(el);
    const fontSize = px(cs.fontSize);
    const font = `${cs.fontStyle} ${cs.fontVariant} ${cs.fontWeight} ${fontSize}px ${cs.fontFamily}`.trim();
    const c = document.createElement('canvas');
    const ctx = c.getContext('2d');
    ctx.font = font;
    ctx.textBaseline = 'alphabetic';
    const sample = el.textContent && el.textContent.trim() ? el.textContent : 'АаБбВвГгDdJjQqЁЙЙ';
    const m = ctx.measureText(sample);
    const ascent  = m.actualBoundingBoxAscent || fontSize * 0.8;
    const descent = m.actualBoundingBoxDescent || fontSize * 0.2;
    return {ascent, descent, fontSize, lineHeight: parsedLineHeight(cs, fontSize)};
  }

  window.buildStrike = function(textWrap, animate=true){
    const old = textWrap.querySelector('.strike-svg'); if(old) old.remove();
    const textEl = textWrap.querySelector('.task-text'); if(!textEl) return;

    if (typeof window.syncEmptyClass === 'function') window.syncEmptyClass(textEl);

    const range = document.createRange(); range.selectNodeContents(textEl);
    const rects = Array.from(range.getClientRects());

    const {ascent, descent, fontSize, lineHeight} = getAscentDescent(textEl);

    const svgNS='http://www.w3.org/2000/svg';
    const svg=document.createElementNS(svgNS,'svg'); svg.classList.add('strike-svg');

    const parentRect=textWrap.getBoundingClientRect();
    svg.setAttribute('width', parentRect.width);
    svg.setAttribute('height', parentRect.height);
    svg.setAttribute('viewBox', `0 0 ${parentRect.width} ${parentRect.height}`);

    // Offset from top of line box to the center of the glyph box
    const topToCenter = (lineHeight - fontSize)/2 + (ascent + descent)/2;

    rects.forEach(r=>{
      const x1 = r.left - parentRect.left;
      const x2 = r.right - parentRect.left;
      const len = Math.max(0, x2 - x1);
      if(len <= 0) return;

      const yLocal = (r.top - parentRect.top) + topToCenter;

      const line=document.createElementNS(svgNS,'line');
      line.setAttribute('x1', x1); line.setAttribute('y1', yLocal);
      line.setAttribute('x2', x2); line.setAttribute('y2', yLocal);
      line.classList.add('strike-line');
      line.style.setProperty('--len', `${len}`);
      if(!animate){ line.style.strokeDashoffset=0; line.style.transition='none'; }
      svg.appendChild(line);
      if(animate){ requestAnimationFrame(()=>{ line.style.strokeDashoffset=0; }); }
    });

    textWrap.appendChild(svg);
  };
})();
/* Время */
function updateTime(){
  const el=document.getElementById('time');
  if(!el) return;
  const d=new Date();
  const hh=String(d.getHours()).padStart(2,'0');
  const mm=String(d.getMinutes()).padStart(2,'0');
  el.textContent = `${hh}:${mm}`;
}
setInterval(updateTime, 10000);
updateTime();

/* День недели */
const dowNames = ['Воскресенье','Понедельник','Вторник','Среда','Четверг','Пятница','Суббота'];
(function(){
  const el=document.getElementById('dow');
  if(el){
    el.textContent = dowNames[new Date().getDay()] || 'Сегодня';
  }
})();

/* ДАННЫЕ */
const tasksEl = document.getElementById('tasks');

function taskLi(text=''){
  const li=document.createElement('li');

  const circle=document.createElement('button');
  circle.className='circle'; circle.type='button';
  circle.innerHTML = `
    <svg class="tick" viewBox="0 0 24 24" aria-hidden="true">
      <path d="M6 12.5l4.2 4.2L18 9" />
    </svg>
  `;
  li.appendChild(circle);

  const wrap=document.createElement('div');
  wrap.className='textwrap';
  const input=document.createElement('div');
  input.className='task-text'; input.contentEditable='true'; input.spellcheck=false;
  input.textContent=text;
  const ph=document.createElement('div');
  ph.className='placeholder'; ph.textContent='Новая задача…';
  wrap.appendChild(input); wrap.appendChild(ph);
  li.appendChild(wrap);

  if(text) input.classList.add('hasText');

  circle.addEventListener('touchstart',()=>circle.classList.add('touch'),{passive:true});
  circle.addEventListener('touchend',()=>circle.classList.remove('touch'),{passive:true});
  circle.addEventListener('click', ()=>{
    li.classList.toggle('done');
    buildStrike(wrap,true);
  });

  input.addEventListener('input', ()=>{
    syncEmptyClass(input);
    buildStrike(wrap,false);
  });

  input.addEventListener('focus', ()=>{ /* для iOS */ });

  return li;
}

function syncEmptyClass(el){
  if(el.textContent && el.textContent.trim().length>0) el.classList.add('hasText');
  else el.classList.remove('hasText');
}

/* Первичные элементы */
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Eg'));
tasksEl.appendChild(taskLi('Новая задача…'));

/* Кнопка добавить */
document.getElementById('addBtn')?.addEventListener('click', ()=>{
  const li=taskLi('');
  tasksEl.appendChild(li);
  const input=li.querySelector('.task-text');
  input?.focus();
});

/* ==== iOS Safari strike alignment fix (first pass) ==== */
(function(){
  function isIOS(){
    const ua = navigator.userAgent || '';
    const platform = navigator.platform || '';
    const macTouch = ua.includes('Mac') && 'ontouchend' in document;
    return /iP(hone|od|ad)/.test(platform) || macTouch;
  }

  if (typeof window.buildStrike === 'function' || true){
    window.buildStrike = function(textWrap, animate=true){
      const old = textWrap.querySelector('.strike-svg'); if(old) old.remove();
      const textEl = textWrap.querySelector('.task-text'); if(!textEl) return;

      if (typeof window.syncEmptyClass === 'function') window.syncEmptyClass(textEl);

      const range = document.createRange(); range.selectNodeContents(textEl);
      const rects = Array.from(range.getClientRects());

      const svgNS='http://www.w3.org/2000/svg';
      const svg=document.createElementNS(svgNS,'svg'); svg.classList.add('strike-svg');

      const parentRect=textWrap.getBoundingClientRect();
      svg.setAttribute('width', parentRect.width);
      svg.setAttribute('height', parentRect.height);
      svg.setAttribute('viewBox', `0 0 ${parentRect.width} ${parentRect.height}`);

      let metrics = null;
      try{
        if(!isIOS() && typeof window.getFontMetrics === 'function'){
          metrics = window.getFontMetrics(textEl);
        }
      }catch(_){ metrics = null; }

      rects.forEach(r=>{
        const x1 = r.left - parentRect.left;
        const x2 = r.right - parentRect.left;
        const len = Math.max(0, x2 - x1);
        if(len <= 0) return;

        let yLocal;
        if(metrics){
          const baseline = (r.bottom - parentRect.top) - metrics.descent;
          const cap = metrics.ascent;
          yLocal = baseline - cap*0.50; // center optically
        }else{
          yLocal = (r.top - parentRect.top) + r.height*0.52; // robust for Safari
        }

        const line=document.createElementNS(svgNS,'line');
        line.setAttribute('x1', x1); line.setAttribute('y1', yLocal);
        line.setAttribute('x2', x2); line.setAttribute('y2', yLocal);
        line.classList.add('strike-line');
        line.style.setProperty('--len', `${len}`);
        if(!animate){ line.style.strokeDashoffset=0; line.style.transition='none'; }
        svg.appendChild(line);
        if(animate){ requestAnimationFrame(()=>{ line.style.strokeDashoffset=0; }); }
      });

      textWrap.appendChild(svg);
    };
  }
})();

/* ==== VisualViewport-driven sizing & keyboard offset ==== */
(function(){
  const vv = window.visualViewport;
  if(!vv){
    document.documentElement.style.setProperty('--appH', window.innerHeight + 'px');
    return;
  }

  let base = Math.max(window.innerHeight, vv.height); // baseline without keyboard

  function setVars(){
    const appH = Math.round(vv.height);
    document.documentElement.style.setProperty('--appH', appH + 'px');
    const kb = Math.max(0, base - vv.height);  // keyboard overlay height approximation
    document.documentElement.style.setProperty('--kb-offset', kb + 'px');
  }

  vv.addEventListener('resize', setVars);
  vv.addEventListener('scroll', setVars);
  window.addEventListener('orientationchange', () => {
    setTimeout(()=>{
      base = Math.max(window.innerHeight, (window.visualViewport && window.visualViewport.height) || window.innerHeight);
      setVars();
    }, 300);
  });

  setVars();
})();

/* ==== Precise (Cyrillic-aware) strikethrough centering ==== */
(function(){
  function px(n){ return parseFloat(n)||0; }
  function parsedLineHeight(cs, fontSize){
    const lh = cs.lineHeight;
    if(lh === 'normal' || !lh) return 1.2 * fontSize; // typical UA default
    if(lh.endsWith('px')) return px(lh);
    const mul = parseFloat(lh);
    if(!isNaN(mul)) return mul * fontSize;
    return 1.2 * fontSize;
  }

  function getAscentDescent(el){
    const cs = getComputedStyle(el);
    const fontSize = px(cs.fontSize);
    const font = `${cs.fontStyle} ${cs.fontVariant} ${cs.fontWeight} ${fontSize}px ${cs.fontFamily}`.trim();
    const c = document.createElement('canvas');
    const ctx = c.getContext('2d');
    ctx.font = font;
    ctx.textBaseline = 'alphabetic';
    const sample = el.textContent && el.textContent.trim() ? el.textContent : 'АаБбВвГгDdJjQqЁЙЙ';
    const m = ctx.measureText(sample);
    const ascent  = m.actualBoundingBoxAscent || fontSize * 0.8;
    const descent = m.actualBoundingBoxDescent || fontSize * 0.2;
    return {ascent, descent, fontSize, lineHeight: parsedLineHeight(cs, fontSize)};
  }

  window.buildStrike = function(textWrap, animate=true){
    const old = textWrap.querySelector('.strike-svg'); if(old) old.remove();
    const textEl = textWrap.querySelector('.task-text'); if(!textEl) return;

    if (typeof window.syncEmptyClass === 'function') window.syncEmptyClass(textEl);

    const range = document.createRange(); range.selectNodeContents(textEl);
    const rects = Array.from(range.getClientRects());

    const {ascent, descent, fontSize, lineHeight} = getAscentDescent(textEl);

    const svgNS='http://www.w3.org/2000/svg';
    const svg=document.createElementNS(svgNS,'svg'); svg.classList.add('strike-svg');

    const parentRect=textWrap.getBoundingClientRect();
    svg.setAttribute('width', parentRect.width);
    svg.setAttribute('height', parentRect.height);
    svg.setAttribute('viewBox', `0 0 ${parentRect.width} ${parentRect.height}`);

    // Offset from top of line box to the center of the glyph box
    const topToCenter = (lineHeight - fontSize)/2 + (ascent + descent)/2;

    rects.forEach(r=>{
      const x1 = r.left - parentRect.left;
      const x2 = r.right - parentRect.left;
      const len = Math.max(0, x2 - x1);
      if(len <= 0) return;

      const yLocal = (r.top - parentRect.top) + topToCenter;

      const line=document.createElementNS(svgNS,'line');
      line.setAttribute('x1', x1); line.setAttribute('y1', yLocal);
      line.setAttribute('x2', x2); line.setAttribute('y2', yLocal);
      line.classList.add('strike-line');
      line.style.setProperty('--len', `${len}`);
      if(!animate){ line.style.strokeDashoffset=0; line.style.transition='none'; }
      svg.appendChild(line);
      if(animate){ requestAnimationFrame(()=>{ line.style.strokeDashoffset=0; }); }
    });

    textWrap.appendChild(svg);
  };
})();
/* Время */
function updateTime(){
  const el=document.getElementById('time');
  if(!el) return;
  const d=new Date();
  const hh=String(d.getHours()).padStart(2,'0');
  const mm=String(d.getMinutes()).padStart(2,'0');
  el.textContent = `${hh}:${mm}`;
}
setInterval(updateTime, 10000);
updateTime();

/* День недели */
const dowNames = ['Воскресенье','Понедельник','Вторник','Среда','Четверг','Пятница','Суббота'];
(function(){
  const el=document.getElementById('dow');
  if(el){
    el.textContent = dowNames[new Date().getDay()] || 'Сегодня';
  }
})();

/* ДАННЫЕ */
const tasksEl = document.getElementById('tasks');

function taskLi(text=''){
  const li=document.createElement('li');

  const circle=document.createElement('button');
  circle.className='circle'; circle.type='button';
  circle.innerHTML = `
    <svg class="tick" viewBox="0 0 24 24" aria-hidden="true">
      <path d="M6 12.5l4.2 4.2L18 9" />
    </svg>
  `;
  li.appendChild(circle);

  const wrap=document.createElement('div');
  wrap.className='textwrap';
  const input=document.createElement('div');
  input.className='task-text'; input.contentEditable='true'; input.spellcheck=false;
  input.textContent=text;
  const ph=document.createElement('div');
  ph.className='placeholder'; ph.textContent='Новая задача…';
  wrap.appendChild(input); wrap.appendChild(ph);
  li.appendChild(wrap);

  if(text) input.classList.add('hasText');

  circle.addEventListener('touchstart',()=>circle.classList.add('touch'),{passive:true});
  circle.addEventListener('touchend',()=>circle.classList.remove('touch'),{passive:true});
  circle.addEventListener('click', ()=>{
    li.classList.toggle('done');
    buildStrike(wrap,true);
  });

  input.addEventListener('input', ()=>{
    syncEmptyClass(input);
    buildStrike(wrap,false);
  });

  input.addEventListener('focus', ()=>{ /* для iOS */ });

  return li;
}

function syncEmptyClass(el){
  if(el.textContent && el.textContent.trim().length>0) el.classList.add('hasText');
  else el.classList.remove('hasText');
}

/* Первичные элементы */
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Eg'));
tasksEl.appendChild(taskLi('Новая задача…'));

/* Кнопка добавить */
document.getElementById('addBtn')?.addEventListener('click', ()=>{
  const li=taskLi('');
  tasksEl.appendChild(li);
  const input=li.querySelector('.task-text');
  input?.focus();
});

/* ==== iOS Safari strike alignment fix (first pass) ==== */
(function(){
  function isIOS(){
    const ua = navigator.userAgent || '';
    const platform = navigator.platform || '';
    const macTouch = ua.includes('Mac') && 'ontouchend' in document;
    return /iP(hone|od|ad)/.test(platform) || macTouch;
  }

  if (typeof window.buildStrike === 'function' || true){
    window.buildStrike = function(textWrap, animate=true){
      const old = textWrap.querySelector('.strike-svg'); if(old) old.remove();
      const textEl = textWrap.querySelector('.task-text'); if(!textEl) return;

      if (typeof window.syncEmptyClass === 'function') window.syncEmptyClass(textEl);

      const range = document.createRange(); range.selectNodeContents(textEl);
      const rects = Array.from(range.getClientRects());

      const svgNS='http://www.w3.org/2000/svg';
      const svg=document.createElementNS(svgNS,'svg'); svg.classList.add('strike-svg');

      const parentRect=textWrap.getBoundingClientRect();
      svg.setAttribute('width', parentRect.width);
      svg.setAttribute('height', parentRect.height);
      svg.setAttribute('viewBox', `0 0 ${parentRect.width} ${parentRect.height}`);

      let metrics = null;
      try{
        if(!isIOS() && typeof window.getFontMetrics === 'function'){
          metrics = window.getFontMetrics(textEl);
        }
      }catch(_){ metrics = null; }

      rects.forEach(r=>{
        const x1 = r.left - parentRect.left;
        const x2 = r.right - parentRect.left;
        const len = Math.max(0, x2 - x1);
        if(len <= 0) return;

        let yLocal;
        if(metrics){
          const baseline = (r.bottom - parentRect.top) - metrics.descent;
          const cap = metrics.ascent;
          yLocal = baseline - cap*0.50; // center optically
        }else{
          yLocal = (r.top - parentRect.top) + r.height*0.52; // robust for Safari
        }

        const line=document.createElementNS(svgNS,'line');
        line.setAttribute('x1', x1); line.setAttribute('y1', yLocal);
        line.setAttribute('x2', x2); line.setAttribute('y2', yLocal);
        line.classList.add('strike-line');
        line.style.setProperty('--len', `${len}`);
        if(!animate){ line.style.strokeDashoffset=0; line.style.transition='none'; }
        svg.appendChild(line);
        if(animate){ requestAnimationFrame(()=>{ line.style.strokeDashoffset=0; }); }
      });

      textWrap.appendChild(svg);
    };
  }
})();

/* ==== VisualViewport-driven sizing & keyboard offset ==== */
(function(){
  const vv = window.visualViewport;
  if(!vv){
    document.documentElement.style.setProperty('--appH', window.innerHeight + 'px');
    return;
  }

  let base = Math.max(window.innerHeight, vv.height); // baseline without keyboard

  function setVars(){
    const appH = Math.round(vv.height);
    document.documentElement.style.setProperty('--appH', appH + 'px');
    const kb = Math.max(0, base - vv.height);  // keyboard overlay height approximation
    document.documentElement.style.setProperty('--kb-offset', kb + 'px');
  }

  vv.addEventListener('resize', setVars);
  vv.addEventListener('scroll', setVars);
  window.addEventListener('orientationchange', () => {
    setTimeout(()=>{
      base = Math.max(window.innerHeight, (window.visualViewport && window.visualViewport.height) || window.innerHeight);
      setVars();
    }, 300);
  });

  setVars();
})();

/* ==== Precise (Cyrillic-aware) strikethrough centering ==== */
(function(){
  function px(n){ return parseFloat(n)||0; }
  function parsedLineHeight(cs, fontSize){
    const lh = cs.lineHeight;
    if(lh === 'normal' || !lh) return 1.2 * fontSize; // typical UA default
    if(lh.endsWith('px')) return px(lh);
    const mul = parseFloat(lh);
    if(!isNaN(mul)) return mul * fontSize;
    return 1.2 * fontSize;
  }

  function getAscentDescent(el){
    const cs = getComputedStyle(el);
    const fontSize = px(cs.fontSize);
    const font = `${cs.fontStyle} ${cs.fontVariant} ${cs.fontWeight} ${fontSize}px ${cs.fontFamily}`.trim();
    const c = document.createElement('canvas');
    const ctx = c.getContext('2d');
    ctx.font = font;
    ctx.textBaseline = 'alphabetic';
    const sample = el.textContent && el.textContent.trim() ? el.textContent : 'АаБбВвГгDdJjQqЁЙЙ';
    const m = ctx.measureText(sample);
    const ascent  = m.actualBoundingBoxAscent || fontSize * 0.8;
    const descent = m.actualBoundingBoxDescent || fontSize * 0.2;
    return {ascent, descent, fontSize, lineHeight: parsedLineHeight(cs, fontSize)};
  }

  window.buildStrike = function(textWrap, animate=true){
    const old = textWrap.querySelector('.strike-svg'); if(old) old.remove();
    const textEl = textWrap.querySelector('.task-text'); if(!textEl) return;

    if (typeof window.syncEmptyClass === 'function') window.syncEmptyClass(textEl);

    const range = document.createRange(); range.selectNodeContents(textEl);
    const rects = Array.from(range.getClientRects());

    const {ascent, descent, fontSize, lineHeight} = getAscentDescent(textEl);

    const svgNS='http://www.w3.org/2000/svg';
    const svg=document.createElementNS(svgNS,'svg'); svg.classList.add('strike-svg');

    const parentRect=textWrap.getBoundingClientRect();
    svg.setAttribute('width', parentRect.width);
    svg.setAttribute('height', parentRect.height);
    svg.setAttribute('viewBox', `0 0 ${parentRect.width} ${parentRect.height}`);

    // Offset from top of line box to the center of the glyph box
    const topToCenter = (lineHeight - fontSize)/2 + (ascent + descent)/2;

    rects.forEach(r=>{
      const x1 = r.left - parentRect.left;
      const x2 = r.right - parentRect.left;
      const len = Math.max(0, x2 - x1);
      if(len <= 0) return;

      const yLocal = (r.top - parentRect.top) + topToCenter;

      const line=document.createElementNS(svgNS,'line');
      line.setAttribute('x1', x1); line.setAttribute('y1', yLocal);
      line.setAttribute('x2', x2); line.setAttribute('y2', yLocal);
      line.classList.add('strike-line');
      line.style.setProperty('--len', `${len}`);
      if(!animate){ line.style.strokeDashoffset=0; line.style.transition='none'; }
      svg.appendChild(line);
      if(animate){ requestAnimationFrame(()=>{ line.style.strokeDashoffset=0; }); }
    });

    textWrap.appendChild(svg);
  };
})();
/* Время */
function updateTime(){
  const el=document.getElementById('time');
  if(!el) return;
  const d=new Date();
  const hh=String(d.getHours()).padStart(2,'0');
  const mm=String(d.getMinutes()).padStart(2,'0');
  el.textContent = `${hh}:${mm}`;
}
setInterval(updateTime, 10000);
updateTime();

/* День недели */
const dowNames = ['Воскресенье','Понедельник','Вторник','Среда','Четверг','Пятница','Суббота'];
(function(){
  const el=document.getElementById('dow');
  if(el){
    el.textContent = dowNames[new Date().getDay()] || 'Сегодня';
  }
})();

/* ДАННЫЕ */
const tasksEl = document.getElementById('tasks');

function taskLi(text=''){
  const li=document.createElement('li');

  const circle=document.createElement('button');
  circle.className='circle'; circle.type='button';
  circle.innerHTML = `
    <svg class="tick" viewBox="0 0 24 24" aria-hidden="true">
      <path d="M6 12.5l4.2 4.2L18 9" />
    </svg>
  `;
  li.appendChild(circle);

  const wrap=document.createElement('div');
  wrap.className='textwrap';
  const input=document.createElement('div');
  input.className='task-text'; input.contentEditable='true'; input.spellcheck=false;
  input.textContent=text;
  const ph=document.createElement('div');
  ph.className='placeholder'; ph.textContent='Новая задача…';
  wrap.appendChild(input); wrap.appendChild(ph);
  li.appendChild(wrap);

  if(text) input.classList.add('hasText');

  circle.addEventListener('touchstart',()=>circle.classList.add('touch'),{passive:true});
  circle.addEventListener('touchend',()=>circle.classList.remove('touch'),{passive:true});
  circle.addEventListener('click', ()=>{
    li.classList.toggle('done');
    buildStrike(wrap,true);
  });

  input.addEventListener('input', ()=>{
    syncEmptyClass(input);
    buildStrike(wrap,false);
  });

  input.addEventListener('focus', ()=>{ /* для iOS */ });

  return li;
}

function syncEmptyClass(el){
  if(el.textContent && el.textContent.trim().length>0) el.classList.add('hasText');
  else el.classList.remove('hasText');
}

/* Первичные элементы */
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Eg'));
tasksEl.appendChild(taskLi('Новая задача…'));

/* Кнопка добавить */
document.getElementById('addBtn')?.addEventListener('click', ()=>{
  const li=taskLi('');
  tasksEl.appendChild(li);
  const input=li.querySelector('.task-text');
  input?.focus();
});

/* ==== iOS Safari strike alignment fix (first pass) ==== */
(function(){
  function isIOS(){
    const ua = navigator.userAgent || '';
    const platform = navigator.platform || '';
    const macTouch = ua.includes('Mac') && 'ontouchend' in document;
    return /iP(hone|od|ad)/.test(platform) || macTouch;
  }

  if (typeof window.buildStrike === 'function' || true){
    window.buildStrike = function(textWrap, animate=true){
      const old = textWrap.querySelector('.strike-svg'); if(old) old.remove();
      const textEl = textWrap.querySelector('.task-text'); if(!textEl) return;

      if (typeof window.syncEmptyClass === 'function') window.syncEmptyClass(textEl);

      const range = document.createRange(); range.selectNodeContents(textEl);
      const rects = Array.from(range.getClientRects());

      const svgNS='http://www.w3.org/2000/svg';
      const svg=document.createElementNS(svgNS,'svg'); svg.classList.add('strike-svg');

      const parentRect=textWrap.getBoundingClientRect();
      svg.setAttribute('width', parentRect.width);
      svg.setAttribute('height', parentRect.height);
      svg.setAttribute('viewBox', `0 0 ${parentRect.width} ${parentRect.height}`);

      let metrics = null;
      try{
        if(!isIOS() && typeof window.getFontMetrics === 'function'){
          metrics = window.getFontMetrics(textEl);
        }
      }catch(_){ metrics = null; }

      rects.forEach(r=>{
        const x1 = r.left - parentRect.left;
        const x2 = r.right - parentRect.left;
        const len = Math.max(0, x2 - x1);
        if(len <= 0) return;

        let yLocal;
        if(metrics){
          const baseline = (r.bottom - parentRect.top) - metrics.descent;
          const cap = metrics.ascent;
          yLocal = baseline - cap*0.50; // center optically
        }else{
          yLocal = (r.top - parentRect.top) + r.height*0.52; // robust for Safari
        }

        const line=document.createElementNS(svgNS,'line');
        line.setAttribute('x1', x1); line.setAttribute('y1', yLocal);
        line.setAttribute('x2', x2); line.setAttribute('y2', yLocal);
        line.classList.add('strike-line');
        line.style.setProperty('--len', `${len}`);
        if(!animate){ line.style.strokeDashoffset=0; line.style.transition='none'; }
        svg.appendChild(line);
        if(animate){ requestAnimationFrame(()=>{ line.style.strokeDashoffset=0; }); }
      });

      textWrap.appendChild(svg);
    };
  }
})();

/* ==== VisualViewport-driven sizing & keyboard offset ==== */
(function(){
  const vv = window.visualViewport;
  if(!vv){
    document.documentElement.style.setProperty('--appH', window.innerHeight + 'px');
    return;
  }

  let base = Math.max(window.innerHeight, vv.height); // baseline without keyboard

  function setVars(){
    const appH = Math.round(vv.height);
    document.documentElement.style.setProperty('--appH', appH + 'px');
    const kb = Math.max(0, base - vv.height);  // keyboard overlay height approximation
    document.documentElement.style.setProperty('--kb-offset', kb + 'px');
  }

  vv.addEventListener('resize', setVars);
  vv.addEventListener('scroll', setVars);
  window.addEventListener('orientationchange', () => {
    setTimeout(()=>{
      base = Math.max(window.innerHeight, (window.visualViewport && window.visualViewport.height) || window.innerHeight);
      setVars();
    }, 300);
  });

  setVars();
})();

/* ==== Precise (Cyrillic-aware) strikethrough centering ==== */
(function(){
  function px(n){ return parseFloat(n)||0; }
  function parsedLineHeight(cs, fontSize){
    const lh = cs.lineHeight;
    if(lh === 'normal' || !lh) return 1.2 * fontSize; // typical UA default
    if(lh.endsWith('px')) return px(lh);
    const mul = parseFloat(lh);
    if(!isNaN(mul)) return mul * fontSize;
    return 1.2 * fontSize;
  }

  function getAscentDescent(el){
    const cs = getComputedStyle(el);
    const fontSize = px(cs.fontSize);
    const font = `${cs.fontStyle} ${cs.fontVariant} ${cs.fontWeight} ${fontSize}px ${cs.fontFamily}`.trim();
    const c = document.createElement('canvas');
    const ctx = c.getContext('2d');
    ctx.font = font;
    ctx.textBaseline = 'alphabetic';
    const sample = el.textContent && el.textContent.trim() ? el.textContent : 'АаБбВвГгDdJjQqЁЙЙ';
    const m = ctx.measureText(sample);
    const ascent  = m.actualBoundingBoxAscent || fontSize * 0.8;
    const descent = m.actualBoundingBoxDescent || fontSize * 0.2;
    return {ascent, descent, fontSize, lineHeight: parsedLineHeight(cs, fontSize)};
  }

  window.buildStrike = function(textWrap, animate=true){
    const old = textWrap.querySelector('.strike-svg'); if(old) old.remove();
    const textEl = textWrap.querySelector('.task-text'); if(!textEl) return;

    if (typeof window.syncEmptyClass === 'function') window.syncEmptyClass(textEl);

    const range = document.createRange(); range.selectNodeContents(textEl);
    const rects = Array.from(range.getClientRects());

    const {ascent, descent, fontSize, lineHeight} = getAscentDescent(textEl);

    const svgNS='http://www.w3.org/2000/svg';
    const svg=document.createElementNS(svgNS,'svg'); svg.classList.add('strike-svg');

    const parentRect=textWrap.getBoundingClientRect();
    svg.setAttribute('width', parentRect.width);
    svg.setAttribute('height', parentRect.height);
    svg.setAttribute('viewBox', `0 0 ${parentRect.width} ${parentRect.height}`);

    // Offset from top of line box to the center of the glyph box
    const topToCenter = (lineHeight - fontSize)/2 + (ascent + descent)/2;

    rects.forEach(r=>{
      const x1 = r.left - parentRect.left;
      const x2 = r.right - parentRect.left;
      const len = Math.max(0, x2 - x1);
      if(len <= 0) return;

      const yLocal = (r.top - parentRect.top) + topToCenter;

      const line=document.createElementNS(svgNS,'line');
      line.setAttribute('x1', x1); line.setAttribute('y1', yLocal);
      line.setAttribute('x2', x2); line.setAttribute('y2', yLocal);
      line.classList.add('strike-line');
      line.style.setProperty('--len', `${len}`);
      if(!animate){ line.style.strokeDashoffset=0; line.style.transition='none'; }
      svg.appendChild(line);
      if(animate){ requestAnimationFrame(()=>{ line.style.strokeDashoffset=0; }); }
    });

    textWrap.appendChild(svg);
  };
})();
/* Время */
function updateTime(){
  const el=document.getElementById('time');
  if(!el) return;
  const d=new Date();
  const hh=String(d.getHours()).padStart(2,'0');
  const mm=String(d.getMinutes()).padStart(2,'0');
  el.textContent = `${hh}:${mm}`;
}
setInterval(updateTime, 10000);
updateTime();

/* День недели */
const dowNames = ['Воскресенье','Понедельник','Вторник','Среда','Четверг','Пятница','Суббота'];
(function(){
  const el=document.getElementById('dow');
  if(el){
    el.textContent = dowNames[new Date().getDay()] || 'Сегодня';
  }
})();

/* ДАННЫЕ */
const tasksEl = document.getElementById('tasks');

function taskLi(text=''){
  const li=document.createElement('li');

  const circle=document.createElement('button');
  circle.className='circle'; circle.type='button';
  circle.innerHTML = `
    <svg class="tick" viewBox="0 0 24 24" aria-hidden="true">
      <path d="M6 12.5l4.2 4.2L18 9" />
    </svg>
  `;
  li.appendChild(circle);

  const wrap=document.createElement('div');
  wrap.className='textwrap';
  const input=document.createElement('div');
  input.className='task-text'; input.contentEditable='true'; input.spellcheck=false;
  input.textContent=text;
  const ph=document.createElement('div');
  ph.className='placeholder'; ph.textContent='Новая задача…';
  wrap.appendChild(input); wrap.appendChild(ph);
  li.appendChild(wrap);

  if(text) input.classList.add('hasText');

  circle.addEventListener('touchstart',()=>circle.classList.add('touch'),{passive:true});
  circle.addEventListener('touchend',()=>circle.classList.remove('touch'),{passive:true});
  circle.addEventListener('click', ()=>{
    li.classList.toggle('done');
    buildStrike(wrap,true);
  });

  input.addEventListener('input', ()=>{
    syncEmptyClass(input);
    buildStrike(wrap,false);
  });

  input.addEventListener('focus', ()=>{ /* для iOS */ });

  return li;
}

function syncEmptyClass(el){
  if(el.textContent && el.textContent.trim().length>0) el.classList.add('hasText');
  else el.classList.remove('hasText');
}

/* Первичные элементы */
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Новая задача…'));
tasksEl.appendChild(taskLi('Eg'));
tasksEl.appendChild(taskLi('Новая задача…'));

/* Кнопка добавить */
document.getElementById('addBtn')?.addEventListener('click', ()=>{
  const li=taskLi('');
  tasksEl.appendChild(li);
  const input=li.querySelector('.task-text');
  input?.focus();
});

/* ==== iOS Safari strike alignment fix (first pass) ==== */
(function(){
  function isIOS(){
    const ua = navigator.userAgent || '';
    const platform = navigator.platform || '';
    const macTouch = ua.includes('Mac') && 'ontouchend' in document;
    return /iP(hone|od|ad)/.test(platform) || macTouch;
  }

  if (typeof window.buildStrike === 'function' || true){
    window.buildStrike = function(textWrap, animate=true){
      const old = textWrap.querySelector('.strike-svg'); if(old) old.remove();
      const textEl = textWrap.querySelector('.task-text'); if(!textEl) return;

      if (typeof window.syncEmptyClass === 'function') window.syncEmptyClass(textEl);

      const range = document.createRange(); range.selectNodeContents(textEl);
      const rects = Array.from(range.getClientRects());

      const svgNS='http://www.w3.org/2000/svg';
      const svg=document.createElementNS(svgNS,'svg'); svg.classList.add('strike-svg');

      const parentRect=textWrap.getBoundingClientRect();
      svg.setAttribute('width', parentRect.width);
      svg.setAttribute('height', parentRect.height);
      svg.setAttribute('viewBox', `0 0 ${parentRect.width} ${parentRect.height}`);

      let metrics = null;
      try{
        if(!isIOS() && typeof window.getFontMetrics === 'function'){
          metrics = window.getFontMetrics(textEl);
        }
      }catch(_){ metrics = null; }

      rects.forEach(r=>{
        const x1 = r.left - parentRect.left;
        const x2 = r.right - parentRect.left;
        const len = Math.max(0, x2 - x1);
        if(len <= 0) return;

        let yLocal;
        if(metrics){
          const baseline = (r.bottom - parentRect.top) - metrics.descent;
          const cap = metrics.ascent;
          yLocal = baseline - cap*0.50; // center optically
        }else{
          yLocal = (r.top - parentRect.top) + r.height*0.52; // robust for Safari
        }

        const line=document.createElementNS(svgNS,'line');
        line.setAttribute('x1', x1); line.setAttribute('y1', yLocal);
        line.setAttribute('x2', x2); line.setAttribute('y2', yLocal);
        line.classList.add('strike-line');
        line.style.setProperty('--len', `${len}`);
        if(!animate){ line.style.strokeDashoffset=0; line.style.transition='none'; }
        svg.appendChild(line);
        if(animate){ requestAnimationFrame(()=>{ line.style.strokeDashoffset=0; }); }
      });

      textWrap.appendChild(svg);
    };
  }
})();

/* ==== VisualViewport-driven sizing & keyboard offset ==== */
(function(){
  const vv = window.visualViewport;
  if(!vv){
    document.documentElement.style.setProperty('--appH', window.innerHeight + 'px');
    return;
  }

  let base = Math.max(window.innerHeight, vv.height); // baseline without keyboard

  function setVars(){
    const appH = Math.round(vv.height);
    document.documentElement.style.setProperty('--appH', appH + 'px');
    const kb = Math.max(0, base - vv.height);  // keyboard overlay height approximation
    document.documentElement.style.setProperty('--kb-offset', kb + 'px');
  }

  vv.addEventListener('resize', setVars);
  vv.addEventListener('scroll', setVars);
  window.addEventListener('orientationchange', () => {
    setTimeout(()=>{
      base = Math.max(window.innerHeight, (window.visualViewport && window.visualViewport.height) || window.innerHeight);
      setVars();
    }, 300);
  });

  setVars();
})();

/* ==== Precise (Cyrillic-aware) strikethrough centering ==== */
(function(){
  function px(n){ return parseFloat(n)||0; }
  function parsedLineHeight(cs, fontSize){
    const lh = cs.lineHeight;
    if(lh === 'normal' || !lh) return 1.2 * fontSize; // typical UA default
    if(lh.endsWith('px')) return px(lh);
    const mul = parseFloat(lh);
    if(!isNaN(mul)) return mul * fontSize;
    return 1.2 * fontSize;
  }

  function getAscentDescent(el){
    const cs = getComputedStyle(el);
    const fontSize = px(cs.fontSize);
    const font = `${cs.fontStyle} ${cs.fontVariant} ${cs.fontWeight} ${fontSize}px ${cs.fontFamily}`.trim();
    const c = document.createElement('canvas');
    const ctx = c.getContext('2d');
    ctx.font = font;
    ctx.textBaseline = 'alphabetic';
    const sample = el.textContent && el.textContent.trim() ? el.textContent : 'АаБбВвГгDdJjQqЁЙЙ';
    const m = ctx.measureText(sample);
    const ascent  = m.actualBoundingBoxAscent || fontSize * 0.8;
    const descent = m.actualBoundingBoxDescent || fontSize * 0.2;
    return {ascent, descent, fontSize, lineHeight: parsedLineHeight(cs, fontSize)};
  }

  window.buildStrike = function(textWrap, animate=true){
    const old = textWrap.querySelector('.strike-svg'); if(old) old.remove();
    const textEl = textWrap.querySelector('.task-text'); if(!textEl) return;

    if (typeof window.syncEmptyClass === 'function') window.syncEmptyClass(textEl);

    const range = document.createRange(); range.selectNodeContents(textEl);
    const rects = Array.from(range.getClientRects());

    const {ascent, descent, fontSize, lineHeight} = getAscentDescent(textEl);

    const svgNS='http://www.w3.org/2000/svg';
    const svg=document.createElementNS(svgNS,'svg'); svg.classList.add('strike-svg');

    const parentRect=textWrap.getBoundingClientRect();
    svg.setAttribute('width', parentRect.width);
    svg.setAttribute('height', parentRect.height);
    svg.setAttribute('viewBox', `0 0 ${parentRect.width} ${parentRect.height}`);

    // Offset from top of line box to the center of the glyph box
    const topToCenter = (lineHeight - fontSize)/2 + (ascent + descent)/2;

    rects.forEach(r=>{
      const x1 = r.left - parentRect.left;
      const x2 = r.right - parentRect.left;
      const len = Math.max(0, x2 - x1);
      if(len <= 0) return;

      const yLocal = (r.top - parentRect.top) + topToCenter;

      const line=document.createElementNS(svgNS,'line');
      line.setAttribute('x1', x1); line.setAttribute('y1', yLocal);
      line.setAttribute('x2', x2); line.setAttribute('y2', yLocal);
      line.classList.add('strike-line');
      line.style.setProperty('--len', `${len}`);
      if(!animate){ line.style.strokeDashoffset=0; line.style.transition='none'; }
      svg.appendChild(line);
      if(animate){ requestAnimationFrame(()=>{ line.style.strokeDashoffset=0; }); }
    });

    textWrap.appendChild(svg);
  };
})();
